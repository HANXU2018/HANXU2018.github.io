<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://HANXU2018.github.io</id>
    <title>HANXU2018 blog</title>
    <updated>2020-07-25T17:33:04.700Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://HANXU2018.github.io"/>
    <link rel="self" href="https://HANXU2018.github.io/atom.xml"/>
    <subtitle>Han xu&apos;s personal blog</subtitle>
    <logo>https://HANXU2018.github.io/images/avatar.png</logo>
    <icon>https://HANXU2018.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, HANXU2018 blog</rights>
    <entry>
        <title type="html"><![CDATA[[K8S&K3S]Multi-node deployment for K3S]]></title>
        <id>https://HANXU2018.github.io/2pNQsixue/</id>
        <link href="https://HANXU2018.github.io/2pNQsixue/">
        </link>
        <updated>2020-07-25T06:49:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="multi-node-deployment-for-k3s">Multi-node deployment for K3S</h1>
<p>The content of this experiment is the multi-node K3S deployment experiment under the ubuntu18.04 2 core 4G memory environment<br>
I'm just going to use three servers as one master node and two slave nodes.</p>
<h2 id="environment-introduction">Environment Introduction</h2>
<h3 id="why-use-ubuntu">why use ubuntu ？</h3>
<p>centos7 ubuntu18,.04 and win10 ,They are popular operating systems that support kbueadm</p>
<p>Our next experiment is a test under the same environment as K3S<br>
K3s is not perfect for Centos and does not support Win10<br>
so we use ubuntu18.04 to test.</p>
<h3 id="why-use-2core-and-4g-memory-run-the-configure">why use ２core and 4G memory Run the configure ？</h3>
<p>Because this is the limit min configure of one single k8s requirements.<br>
But the k3s is requeirement 1core and 512MB to run.</p>
<h3 id="environment-construction">Environment construction</h3>
<p>I use vmvare in a Windows10 environment<br>
Because the virtual machine environment for configuration upgrade cloning and server rollback is very convenient compared to the physical computer is more suitable for rapid experiments.</p>
<p>Of course, if you have the ability or try to choose a physical machine for the experiment</p>
<h2 id="the-experimental-steps">The experimental steps</h2>
<ol>
<li>Start experimenting from remote SSH entry to the server</li>
<li>install docker
<ol>
<li>Due to the special network environment in China added by Aliyun, China's accelerated foreign users can not join -mirror Aliyun environment</li>
</ol>
</li>
</ol>
<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p>It is recommended that the virtual machine after docker installation should be used for snapshot storage in subsequent experiments. We can quickly clone the current environment<br>
2. Use the official script for the installation</p>
<pre><code>curl -sfL https://get.k3s.io | sh -
</code></pre>
<p>K3s provides customized installation scripts for special environments for Chinese users</p>
<pre><code>curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -
</code></pre>
<ol start="3">
<li>K3s USES Containerd as the container by default.<br>
For comparison with K8S, we used Docker</li>
</ol>
<p>After installation, we need to adjust K3S 'service profile to switch K3S' default container engine from Containerd to Docker.</p>
<pre><code>vim /etc/systemd/system/multi-user.target.wants/k3s.service
</code></pre>
<p>Here, we need to modify the value of ExecStart and change it to:</p>
<pre><code>/usr/local/bin/k3s server --docker --no-deploy traefik
</code></pre>
<ol start="4">
<li>Save the exit and execute the command to reload the new service configuration file</li>
</ol>
<pre><code>   systemctl daemon-reload
</code></pre>
<p>Restart k3s</p>
<pre><code>service k3s restart
</code></pre>
<ol start="5">
<li>Verify that the K3S cluster is ready</li>
</ol>
<pre><code>   k3s kubectl get node
</code></pre>
<p>if it is success we will see ready</p>
<pre><code>NAME                  STATUS   ROLES    AGE     VERSION
k3s01.ilemonrain.io   Ready    &lt;none&gt;   3m34s   v1.14.1-k3s.4
</code></pre>
<p>Then, K3S cluster startup is successful.</p>
<ol start="6">
<li>K3s can directly use the kubectl command in K8S<br>
<code>kubectl get node</code></li>
</ol>
<pre><code>NAME                  STATUS   ROLES    AGE     VERSION
k3s01.ilemonrain.io   Ready    &lt;none&gt;   3m34s   v1.14.1-k3s.4
</code></pre>
<ol start="7">
<li>Repeat the steps above to deploy three servers<br>
For the next two deployed servers, we treat it as a worker node<br>
Stop the current K3S process with the command</li>
</ol>
<pre><code>service k3s stop
</code></pre>
<ol start="8">
<li>The first node is the master node.<br>
Execute the following command to get Token for registering cluster members</li>
</ol>
<pre><code>cat /var/lib/rancher/k3s/server/node-token
</code></pre>
<p>This string helps us to connect working nodes quickly<br>
We also need to know the IP address of the master node</p>
<p>If you are installing on a physical machine you can get the IP address directly by doing so</p>
<pre><code>curl ip.sb
</code></pre>
<p>But I'm using a virtual machine so I need to get the Intranet IP</p>
<pre><code>ifconfig -a 
</code></pre>
<ol start="9">
<li>The Worker node registers the cluster<br>
Run this command for registration on the node where we just shut down k3S service</li>
</ol>
<pre><code>k3s agent --server https://[master IP]:6443 --token [Token]
</code></pre>
<ul>
<li>IP replacement [Master IP] obtained in the previous step</li>
<li>Token replacement [Token] obtained in the previous step</li>
</ul>
<ol start="9">
<li>Let's go to the master node and see what happens</li>
</ol>
<pre><code>k3s kubectl get nodes
</code></pre>
<p>The output is as follows</p>
<pre><code>NAME STATUS ROLES AGE VERSION
server01 Ready master 18m v1.14.5-k3s.1
server02 Ready worker 60s v1.14.5-k3s.1
server03 Ready worker 60s v1.14.5-k3s.1
</code></pre>
<ol start="10">
<li>The worker node is not fully installed. We still need to make the final modifications</li>
</ol>
<p>The following operations are performed on the Worker node<br>
Ctrl+C terminates the process</p>
<pre><code>vim /etc/systemd/system/k3s.service
</code></pre>
<p>The default file is as follows</p>
<pre><code>[Unit]
Description=Lightweight Kubernetes
Documentation=https://k3s.io
After=network-online.target

[Service]
Type=notify
EnvironmentFile=/etc/systemd/system/k3s.service.env
ExecStartPre=-/sbin/modprobe br_netfilter
ExecStartPre=-/sbin/modprobe overlay
ExecStart=/usr/local/bin/k3s \
    server \

KillMode=process
Delegate=yes
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TasksMax=infinity
TimeoutStartSec=0
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
</code></pre>
<p>Let's modify this row</p>
<pre><code>ExecStart=/usr/local/bin/k3s \
    server \
</code></pre>
<p>This is the same substitution rule as in the previous step</p>
<pre><code>ExecStart=/usr/local/bin/k3s agent --server https://[Master IP] :6443 --token [Token] 
</code></pre>
<p>Reload the configuration file after exit</p>
<pre><code>systemctl daemon-reload
</code></pre>
<p>Restart K3S</p>
<pre><code>service k3s restart
</code></pre>
<p>Now the operation of the worker node has been completed<br>
We check in the master node</p>
<pre><code>k3s kubectl get nodes
</code></pre>
<h2 id="the-experimental-conclusion">The experimental conclusion</h2>
<p>Multi-node deployment of K3S is quite simple compared to single-node deployment</p>
<p>Just two more parts of the binding Token and changing roles<br>
For me, it's easy and quick to do</p>
<p>The multi-node deployment of k8S is described later<br>
You actually use token for binding but with a few different Settings</p>
<p>The only problem I found was that I didn't find anything like the official k3S one-click install script</p>
<p>I think that's what makes the K8S Deployment  more complicated</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[K8S&K3S]Single node deployment for K3S]]></title>
        <id>https://HANXU2018.github.io/GL2XrVzMp/</id>
        <link href="https://HANXU2018.github.io/GL2XrVzMp/">
        </link>
        <updated>2020-07-20T09:29:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="single-node-deployment-for-k3s">Single node deployment for K3S</h1>
<p>The content of this experiment is the experiment of K3S deployment with kubeadm single node in ubuntu18.04 2 core 4G memory environment</p>
<h2 id="environment-introduction">Environment Introduction</h2>
<h3 id="why-use-ubuntu">why use ubuntu ？</h3>
<p>centos7 ubuntu18,.04 and win10 ,They are popular operating systems that support kbueadm</p>
<p>Our next experiment is a test under the same environment as K3S<br>
K3s is not perfect for Centos and does not support Win10<br>
so we use ubuntu18.04 to test.</p>
<h3 id="why-use-2core-and-4g-memory-run-the-configure">why use ２core and 4G memory Run the configure ？</h3>
<p>Because this is the limit min configure of one single k8s requirements.<br>
But the k3s is requeirement 1core and 512MB to run.</p>
<h3 id="environment-construction">Environment construction</h3>
<p>I use vmvare in a Windows10 environment<br>
Because the virtual machine environment for configuration upgrade cloning and server rollback is very convenient compared to the physical computer is more suitable for rapid experiments.</p>
<p>Of course, if you have the ability or try to choose a physical machine for the experiment</p>
<h2 id="the-experimental-steps">The experimental steps</h2>
<ol start="0">
<li>Start experimenting from remote SSH entry to the server</li>
<li>install docker
<ol>
<li>Due to the special network environment in China added by Aliyun, China's accelerated foreign users can not join -mirror Aliyun environment</li>
</ol>
</li>
</ol>
<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p>It is recommended that the virtual machine after docker installation should be used for snapshot storage in subsequent experiments. We can quickly clone the current environment<br>
2. Use the official script for the installation</p>
<pre><code>curl -sfL https://get.k3s.io | sh -
</code></pre>
<p>K3s provides customized installation scripts for special environments for Chinese users</p>
<pre><code>curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -
</code></pre>
<ol start="3">
<li>K3s USES Containerd as the container by default.<br>
For comparison with K8S, we used Docker</li>
</ol>
<p>After installation, we need to adjust K3S 'service profile to switch K3S' default container engine from Containerd to Docker.</p>
<pre><code>vim /etc/systemd/system/multi-user.target.wants/k3s.service
</code></pre>
<p>Here, we need to modify the value of ExecStart and change it to:</p>
<pre><code>/usr/local/bin/k3s server --docker --no-deploy traefik
</code></pre>
<ol start="4">
<li>Save the exit and execute the command to reload the new service configuration file</li>
</ol>
<pre><code>   systemctl daemon-reload
</code></pre>
<p>Restart k3s</p>
<pre><code>service k3s restart
</code></pre>
<ol start="5">
<li>Verify that the K3S cluster is ready</li>
</ol>
<pre><code>   k3s kubectl get node
</code></pre>
<p>if it is success we will see ready</p>
<pre><code>NAME                  STATUS   ROLES    AGE     VERSION
k3s01.ilemonrain.io   Ready    &lt;none&gt;   3m34s   v1.14.1-k3s.4
</code></pre>
<p>Then, K3S cluster startup is successful.</p>
<ol start="6">
<li>K3s can directly use the kubectl command in K8S<br>
<code>kubectl get node</code></li>
</ol>
<pre><code>NAME                  STATUS   ROLES    AGE     VERSION
k3s01.ilemonrain.io   Ready    &lt;none&gt;   3m34s   v1.14.1-k3s.4
</code></pre>
<h2 id="the-experimental-conclusion">The experimental conclusion</h2>
<p>###　The installation script is very slow<br>
use Chinese mirror that is so fast for me</p>
<pre><code>curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -
</code></pre>
<h3 id="the-default-use-of-containerd-does-not-pull-the-image">The default use of Containerd does not pull the image</h3>
<p>Docker can be used to configure The Chinese environment mirror site</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[K8S&K3S]Single node deployment for K8S]]></title>
        <id>https://HANXU2018.github.io/cz1lO8Mof/</id>
        <link href="https://HANXU2018.github.io/cz1lO8Mof/">
        </link>
        <updated>2020-07-17T13:07:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="single-node-deployment-for-k8s">Single node deployment for K8S</h1>
<p>The content of this experiment is the experiment of K8S deployment with kubeadm single node in ubuntu18.04 2 core 4G memory environment</p>
<h2 id="environment-introduction">Environment Introduction</h2>
<h3 id="why-use-ubuntu">why use ubuntu ？</h3>
<p>centos7 ubuntu18,.04 and win10 ,They are popular operating systems that support kbueadm</p>
<p>Our next experiment is a test under the same environment as K3S<br>
K3s is not perfect for Centos and does not support Win10<br>
so we use ubuntu18.04 to test.</p>
<h3 id="why-use-2core-and-4g-memory-run-the-configure">why use ２core and 4G memory Run the configure ？</h3>
<p>Because this is the limit min configure of one single k8s requirements.<br>
But the k3s is requeirement 1core and 512MB to run.</p>
<h3 id="environment-construction">Environment construction</h3>
<p>I use vmvare in a Windows10 environment<br>
Because the virtual machine environment for configuration upgrade cloning and server rollback is very convenient compared to the physical computer is more suitable for rapid experiments.</p>
<p>Of course, if you have the ability or try to choose a physical machine for the experiment</p>
<h2 id="the-experimental-steps">The experimental steps</h2>
<ol start="0">
<li>Start experimenting from remote SSH entry to the server</li>
<li>Close disk Swap to improve performance
<ol>
<li><code>swapoff - a</code></li>
</ol>
</li>
<li>Configure the network accordingly</li>
</ol>
<pre><code>modprobe br_netfilter     
echo 1 &gt; /proc/sys/net/ipv4/ip_forward 
</code></pre>
<ol start="3">
<li>install docker
<ol>
<li>Due to the special network environment in China added by Aliyun, China's accelerated foreign users can not join -mirror Aliyun environment</li>
</ol>
</li>
</ol>
<pre><code>curl -fssl https://get.docker.com | bash -s docker --mirror aliyun
</code></pre>
<p>It is recommended that the virtual machine after docker installation should be used for snapshot storage in subsequent experiments. We can quickly clone the current environment<br>
4.  Quickly deploy Kubernetes clusters using the Kubeadm tool provided by the Official Kubernetes<br>
1.  Since the default pull mirror address k8S. gCR. IO cannot be accessed in China, the address of Aliyun mirror warehouse is specified here.<br>
2.</p>
<pre><code>kubeadm init  --cri-socket /run/containerd/containerd.sock --pod-network-cidr=10.244.0.0/16 --node-name=master --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers --kubernetes-version v1.18.2
</code></pre>
<ol start="5">
<li>After waiting for some time, the K8S cluster has been successfully deployed and I still need to do some configuration before the deployment is officially successful</li>
</ol>
<pre><code>rm -rf $HOME/.kube
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<p>The configuration file is placed in the Kube /config folder for us to modify the configuration later<br>
6. Mark the primary node as available for POD scheduling</p>
<pre><code>kubectl taint nodes master node - role. Kubernetes. io/master -
</code></pre>
<ol start="7">
<li>Install the Flannel Network plug-in</li>
</ol>
<pre><code>kubectl create -f/share/lesson/ kubernetes/kube - flannel. Yml
</code></pre>
<ol start="8">
<li>Verify that THE POD is working within the cluster<br>
<code>kubectl get Po - a</code><br>
At this point we have successfully configured a single-node test environment</li>
</ol>
<pre><code>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE
kube-system   coredns-546565776c-4k6cn         1/1     Running   0          6m16s
kube-system   coredns-546565776c-sdd4n         1/1     Running   1          6m16s
kube-system   etcd-master                      1/1     Running   0          6m25s
kube-system   kube-apiserver-master            1/1     Running   0          6m25s
kube-system   kube-controller-manager-master   1/1     Running   0          6m25s
kube-system   kube-flannel-ds-amd64-glzlx      1/1     Running   0          54s
kube-system   kube-proxy-gzkbf                 1/1     Running   0          6m17s
kube-system   kube-scheduler-master            1/1     Running   0          6m25s
</code></pre>
<ol start="9">
<li>Validation node<br>
<code>kubectl get node</code></li>
</ol>
<pre><code>NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   6m40s   v1.18.2
</code></pre>
<h2 id="the-experimental-conclusion">The experimental conclusion</h2>
<p>Isn't it easy to deploy a single-node K8S<br>
I met some problems during the experiment</p>
<ol>
<li>
<p>Docker installation problems</p>
<ol>
<li>The Chinese environment USES Sudo Install Docker-CE too slowly =&gt; Switch to the official installation script Support to reference Chinese mirror source for acceleration effect</li>
</ol>
</li>
<li>
<p>K8s failed to pull docker image =&gt; Google servers are not accessible in China Configuring China Aliyun's mirror site in Hangzhou, Zhejiang, China solves this problem</p>
</li>
<li>
<p>Kubeadm init failed</p>
<ol>
<li>Did not close disk SWAP</li>
</ol>
</li>
<li>
<p>Unable to operate with Kubectl</p>
<ol>
<li>The primary node is not marked as available for POD scheduling</li>
<li>The Flannel network plug-in was not installed</li>
</ol>
</li>
</ol>
<p>It may seem simple, but the first time you use it, you have a lot of problems<br>
The next experiment will make it easier and faster to deploy K3S in the same<br>
environment with a one-click setup script from rancher K3s</p>
<p>The experience of a single node is not that different<br>
Subsequent multi-node deployments will be more complex and the k3S and K8S installation experiences will be more different</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[K8S&K3S]The establishment of experimental environment]]></title>
        <id>https://HANXU2018.github.io/5MuoKdzEN/</id>
        <link href="https://HANXU2018.github.io/5MuoKdzEN/">
        </link>
        <updated>2020-07-14T15:35:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="environmental-preparation">Environmental preparation</h1>
<h2 id="environmental-list">Environmental list</h2>
<p>Before the experimental tests , be prepared to deploy the system server environment for testing.<br>
I prepared the following environment</p>
<ul>
<li>test system
<ul>
<li>windos10</li>
<li>ubuntu18.04</li>
<li>centos7</li>
<li>mac os10.15.5</li>
</ul>
</li>
<li>Using configuration
<ul>
<li>1 Core and 75MB (k3s Agent minimum requirement )</li>
<li>1 Core and 512MB (k3s Server minimum requirement )</li>
<li>1 Core and 1GB (Rancher 2.2 Server minimum requirement )</li>
<li>1 Core and 2GB (Rancher 2.x Server + K3S Server + K3S Agent minimum requirement)</li>
<li>2 Core and 4GB (k8s minimum requirement )</li>
<li>4 Core and 4GB (k3s Slave recommended configuration)</li>
</ul>
</li>
</ul>
<h2 id="real-environment-building-process">Real environment building process</h2>
<ul>
<li>
<p>windos10 (LEGION laptop Y700P i5 8300H 16GB )</p>
<ul>
<li>open Hyper-V and isntall minikube deploy single k8s</li>
<li>Use Virtual Machine to simulate the Linux environment of Ubuntu 18.04 and CentOS7(that i recommand)</li>
</ul>
</li>
<li>
<p>ubuntu18.04(Assembled desktop i3 4 GB )</p>
<ul>
<li>Use Virtual Machine to simulate the Linux environment of Ubuntu 18.04</li>
</ul>
</li>
<li>
<p>mac os10.15.5(i5 9400F 16GB)</p>
<ul>
<li>Use multipass. Allows users to coordinate the creation, administration and maintenance of the Ubuntu Linux virtual machine.</li>
</ul>
</li>
<li>
<p>tencent cloud Online cloud service providers</p>
<ul>
<li>I rent the hourly billing server and can directly select any configured machine to install ubuntu 18.04 or CENTOS 7 system images
<ul>
<li>( That's what I recommend Due to the restrictions of the Internet environment in China, the Google warehouse cannot be accessed smoothly .</li>
<li>The server in Silicon Valley can be rented directly and smoothly to pull the experimental image)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="explanation-of-experimental-environment-selection">Explanation of experimental environment selection</h2>
<ul>
<li>
<p>Win10 can install single-node K8S with minikube</p>
<ul>
<li>Win10 systems have the highest market occupancy and developers can test k8S deployment services in a Win10 environment.This is not supported by K3S</li>
</ul>
</li>
<li>
<p>Mac os Not being able to deploy k3S and K8S directly can be implemented with virtual machines.</p>
<ul>
<li>Win10 can also be implemented with the help of virtual machine, so the subsequent only record virtual machine environment deployment. The specific deployment within the virtual machine will be categorized into Linux environment deployment</li>
</ul>
</li>
<li>
<p>CentOS7</p>
<ul>
<li>A Linux distribution of RHEL .  Most companies in China use it</li>
<li>K8s can be well compatible due to its maturity</li>
<li>K3s is not fully mature and is officially compatible with Ubuntu18.04 but not fully compatible with CentOS.</li>
</ul>
</li>
<li>
<p>Ubuntu18.04</p>
<ul>
<li>Simple, stable, and easy to use are different from CentOS</li>
<li>Linux users use Ubuntu on a daily basis</li>
<li>K3s already has very good support for it</li>
<li>The K8S is very mature and certainly can be used smoothly</li>
</ul>
</li>
</ul>
<h1 id="summary-of-experimental-environment">Summary of experimental environment</h1>
<h2 id="mac-os-and-win10">Mac OS and Win10</h2>
<ul>
<li>The vast majority of developers are using systems<br>
-Windows 10 and Mac OS don't have full K8S and K3S adapters,In most cases, virtual machines are also required for installation and deployment.</li>
</ul>
<h2 id="centos-7">CentOS 7</h2>
<ul>
<li>CentOS is mature and secure and used by most businesses.</li>
<li>Suitable for mature K8S technology.</li>
<li>K3s has some drawbacks but is still trying to fit in and may be perfect later</li>
</ul>
<h2 id="ubuntu1804">Ubuntu18.04</h2>
<p>-Ubuntu Linux systems with a high user base are both user interface and hardware compatible</p>
<ul>
<li>Both K8S and K3S work well together</li>
<li>The best area for Ubuntu to be used is the desktop operating system. Not the server operating system. Ubuntu consumes hundreds of megabytes of drivers and precious memory</li>
</ul>
<h1 id="finally">finally</h1>
<p>If you find any problems with my article, please point out that I will fix them immediately.<br>
I am also a beginner please forgive me.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[K8S&K3S]comparison test First summarized]]></title>
        <id>https://HANXU2018.github.io/94QoMHeXs/</id>
        <link href="https://HANXU2018.github.io/94QoMHeXs/">
        </link>
        <updated>2020-07-14T12:13:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="what-is-k8s-and-k3s">what is k8s and k3s</h1>
<h2 id="k8s">k8s</h2>
<p>K8s is an abbreviation for &quot;8&quot; instead of &quot;Ubernete&quot;.<br>
The Greek word Kubernetes means &quot;helmsman&quot; or &quot;navigator,&quot; and is the root of &quot;manager&quot; and &quot;cybernetics.&quot;</p>
<p>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.</p>
<h2 id="k3s">k3s</h2>
<p>K3s is the Lightweight Kubernetes<br>
The certified Kubernetes distribution built for IoT &amp; Edge computing</p>
<p>What is the full name of K3S ?<br>
K3s doesn't have a full name, we're just comparing it to k8S.</p>
<blockquote>
<p>The answer comes from the engineers in the K3S development community<br>
https://shimo.im/docs/HjYY8c836jPgPJK9/read</p>
</blockquote>
<p>In my opinion, K3S is a similar tool to K8S.<br>
But k3S is more lightweight such as k3S minimum requirement configuration 1 core and 512 M RAM.( 0.5 G RAM)<br>
Recent request of K8S 2 core and 4096 M RAM ( 4.0 GB).</p>
<p>Of course, is that really the case?<br>
In the future, I will conduct tests and write comparative documents.</p>
<h1 id="what-i-did">what i did</h1>
<p>I will complete the comparison test of K8S and K3S.<br>
I encountered a lot of details during the test<br>
I believe you may also meet<br>
I will rearrange the process of my previous experiment<br>
And share my problems and solutions<br>
This looks pretty simple<br>
But to really get started you have a lot of different problems<br>
For example, if you can't pull the image, for example, the experimental Linux installation environment k3S is not suitable</p>
<p>I am very grateful to my advisor for giving me time and guidance so that I can always learn to solve these problems</p>
<p>I have finished the local experiment and am compiling the documentation there</p>
<ul>
<li>Single node deployment k8S</li>
<li>Single node deployment k3S</li>
<li>Multi-node k8S deployment</li>
<li>Multi-node k3S deployment</li>
<li>Deploy K3S with minimal configuration</li>
<li>K8s start dashboard for visual management</li>
<li>K3s users rancher for visual management</li>
<li>Off-line deployment of K8S for information security without external network production environment</li>
<li>Off-line deployment of K3S for information security without external network production environment</li>
</ul>
<h1 id="what-i-will-do">What I will do</h1>
<p>The above experiments will be recorded and published as a blog.<br>
It can help students who haven't studied to learn together or make reference to problems</p>
<p>All the experiments I designed by myself are controlled designs of K3S and K8S</p>
<p>Except for the records of each experiment,I'll also post a control evaluation after the two trials.</p>
<p>It's hard to say whether k8s is better or k3S<br>
It's hard for me to say it directly<br>
But I recorded the experiment and my subjective feelings<br>
Hopefully it will help the novice to get started<br>
And engineers in the process of technical selection for reference</p>
<p>I hope my learning process and record can produce value</p>
<h1 id="todo-list">todo list</h1>
<p>This is my upcoming blog project</p>
<ul>
<li>Summary of experimental environment construction</li>
<li>Kubeadm rapid deployment of single node Kubernetes</li>
<li>K3s official script one-click deployment</li>
<li>Single node deployment summary for K3S and K8S</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learn about the strange ideas that come from YUM XML and Properties]]></title>
        <id>https://HANXU2018.github.io/kz5dA-uWs/</id>
        <link href="https://HANXU2018.github.io/kz5dA-uWs/">
        </link>
        <updated>2020-06-09T01:26:21.000Z</updated>
        <content type="html"><![CDATA[<p>Last week, I learned about the knowledge related to K8S profile<br>
Yaml, which I came across in the k8S tutorial, is another new configuration file format for me</p>
<p>Properties,xml,yml<br>
These file formats all can be used as configuration files<br>
A strange idea occurred to me</p>
<p>Why are there so many different kinds of configuration files<br>
As a beginner, I'm not sure<br>
But in previous personal insights Shared with other software engineers<br>
They will say that language is just a tool<br>
Different programming languages are different pens</p>
<p>Properties、XML、YAML They all seem to have the same tools<br>
To improve learning efficiency and communication costs<br>
Why can't these technologies be unified</p>
<p>This is a simple thought in my learning process<br>
Perhaps the idea doesn't make sense to you<br>
Maybe this kind of thinking has a philosophical feel</p>
<p>Just like English is becoming more and more popular all over the world<br>
Why can't there be gradual convergence in technology？<br>
I don't know if there are other people who have the same strange idea as Me</p>
<h1 id="tutors-reply">Tutor's reply</h1>
<p>Unfortunately there are more and more languages in technology it is a<br>
way to get a language better suited for each technology...</p>
<ul>
<li>I think more languages can make different technologies fit different professional needs more professionally</li>
<li>Of course, it brings with it a lot of drawbacks. Maybe a software engineer needs to master many programming languages, and none of them are very important</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 yum usage errors caused a number of problems]]></title>
        <id>https://HANXU2018.github.io/O-QCh5Ax2/</id>
        <link href="https://HANXU2018.github.io/O-QCh5Ax2/">
        </link>
        <updated>2020-06-09T01:25:14.000Z</updated>
        <content type="html"><![CDATA[<p>I had an error using the yum command  in the Centos virtual machine<br>
The question bothered me for several days<br>
I gave it a try<br>
The default warehouse on the special network in China is not available</p>
<p>I have configured alibaba's warehouse address<br>
But it didn't work<br>
I also changed the mirror source of a university in China<br>
It still doesn't work<br>
I know this is not the only part of the problem</p>
<p>I think it is very likely that there is a problem with THE DNS service through querying relevant information<br>
I tried the most famous Google DNS 8.8.8.8<br>
And the network provider I used provided the address 114.114.114.114</p>
<p>Find the problem is still unresolved</p>
<p>One of the virtual machines even had an error restarting the network<br>
（systemctl restart network）<br>
It's confusing to find problems recursively<br>
I came across a blog entry</p>
<p>He said because the centos7 Mini was installed<br>
Almost none of the tools are pre-installed</p>
<p>The Named server does not exist at all</p>
<p>The solutions given<br>
Yum install bind<br>
The chkconfig named on<br>
But yum is just not available</p>
<p>I went through the k8s tutorial again</p>
<p>Found out I missed an operation<br>
This is the tool that is pre-installed when centos is installed</p>
<p>I tried to reinstall my three nodes<br>
It will take some time, I'm afraid<br>
But it would be all right if we could solve this problem</p>
<p>Sure enough, the tutorial doesn't look too hard, but there are all kinds of problems with real hands-on work</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[study k8s]Create a mock environment using VMware]]></title>
        <id>https://HANXU2018.github.io/RBTBz0s6T/</id>
        <link href="https://HANXU2018.github.io/RBTBz0s6T/">
        </link>
        <updated>2020-06-01T13:41:21.000Z</updated>
        <summary type="html"><![CDATA[<p>I began to practice using k8s<br>
I know I need at least three machines to work together<br>
One master node and two worker nodes<br>
Today I'm going to use a virtual machine to build a Centos7.0 64  server</p>
]]></summary>
        <content type="html"><![CDATA[<p>I began to practice using k8s<br>
I know I need at least three machines to work together<br>
One master node and two worker nodes<br>
Today I'm going to use a virtual machine to build a Centos7.0 64  server</p>
<!-- more -->
<h1 id="prepare">prepare</h1>
<ul>
<li>Installation kit for centos<br>
<img src="https://HANXU2018.github.io/post-images/1591019562923.png" alt="Installation kit for centos" loading="lazy"></li>
<li>VMware</li>
<li>6G RAM  and 6 Core (2G RAM 2 Core for one node)</li>
</ul>
<h1 id="configuration-environment">configuration environment</h1>
<ol>
<li>new an environment and choose ios install later.<br>
<img src="https://HANXU2018.github.io/post-images/1591019913239.png" alt="new an environment and choose ios install later." loading="lazy"></li>
<li>Choose Linux Centos 7 to install<br>
<img src="https://HANXU2018.github.io/post-images/1591019977604.png" alt="Choose Linux Centos 7 to install" loading="lazy"></li>
<li>Use two core<img src="https://HANXU2018.github.io/post-images/1591020030335.png" alt="Use two core" loading="lazy"></li>
<li>Distribution of 2048 MB <img src="https://HANXU2018.github.io/post-images/1591020063550.png" alt="Distribution of 2048 MB" loading="lazy"></li>
<li>The hard disk is set to 100GB<img src="https://HANXU2018.github.io/post-images/1591020091283.png" alt="The hard disk is set to 100GB" loading="lazy"></li>
<li>Everything else is configured by default So that's configured</li>
</ol>
<h1 id="lets-start-the-installation">Let's start the installation</h1>
<ol>
<li>Configure the installer you just downloaded<img src="https://HANXU2018.github.io/post-images/1591020238933.png" alt="Configure the installer you just downloaded" loading="lazy"></li>
<li>Choose your locale Chinese is basically at the end<br>
<img src="https://HANXU2018.github.io/post-images/1591020265122.png" alt="Choose your locale" loading="lazy"></li>
<li>Configure the warehouse source<br>
I mentioned that the Chinese network is very special and needs to rely on a unique mirror image<br>
<img src="https://HANXU2018.github.io/post-images/1591020342520.png" alt="Configure the warehouse source" loading="lazy"></li>
<li>You still have to open the web link before you do that<br>
<img src="https://HANXU2018.github.io/post-images/1591020461266.png" alt="You still have to open the web link before you do that" loading="lazy"></li>
<li>use aliyun mirror<br>
http://mirrors.aliyun.com/centos/7/os/x86_64/<br>
<img src="https://HANXU2018.github.io/post-images/1591020479652.png" alt="http://mirrors.aliyun.com/centos/7/os/x86_64/" loading="lazy"></li>
<li>Install only the smallest part <img src="https://HANXU2018.github.io/post-images/1591020529752.png" alt="Install only the smallest part" loading="lazy"></li>
<li>Configure the password for root<img src="https://HANXU2018.github.io/post-images/1591020596649.png" alt="Configure the password for root" loading="lazy"></li>
<li>Wait for the installation to complete<br>
<img src="https://HANXU2018.github.io/post-images/1591020633803.png" alt="Wait for the installation to complete" loading="lazy"></li>
</ol>
<h1 id="accomplish">accomplish</h1>
<p>login test the install<br>
<img src="https://HANXU2018.github.io/post-images/1591020658693.png" alt="Log in to check for success" loading="lazy"></p>
<h1 id="summary">summary</h1>
<p>I thought installing a virtual machine would be easy<br>
But there are always problems<br>
For example, setting the mirror source<br>
If I don't translate English in the interface carefully<br>
I wouldn't have known to turn on the Internet first<br>
Fortunately, these problems have been solved through my own exploration</p>
<p>Get into the rest of the study~<br>
2020/6/1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[use tomcat image]There are someting wrong with me ]]></title>
        <id>https://HANXU2018.github.io/jEqxcRGMi/</id>
        <link href="https://HANXU2018.github.io/jEqxcRGMi/">
        </link>
        <updated>2020-05-28T13:46:46.000Z</updated>
        <summary type="html"><![CDATA[<p>There are someting wrong with me</p>
<ol>
<li>My device is limited in using docker and I need to upgrade my configuration</li>
<li>There was a problem deploying the ReadMe for the tomcat repository</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<p>There are someting wrong with me</p>
<ol>
<li>My device is limited in using docker and I need to upgrade my configuration</li>
<li>There was a problem deploying the ReadMe for the tomcat repository</li>
</ol>
<!-- more -->
<p>I've been looking into this code repository （https://github.com/apache/tomcat/tree/master/res/tomcat-maven) t）for the last few days</p>
<p>I cloned this code repository<br>
use<br>
mvn clean;<br>
mvn package<br>
then<br>
docker build -t apache/tomcat-maven:1.0 -f ./Dockerfile .</p>
<p>There are some problems here. It turns out that some configuration files needed are missing.<br>
I researched and solved the problem after my debugging.<br>
Thankfully the mirror image of the ali cloud can pull down the required openjdk: 8-jell-alpine<br>
In the running section below I followed the documentation to run the jar in Java but I haven't seen the results yet<br>
I changed my mind to run the generated image with docker<br>
I saw it in the browser<br>
Apache Tomcat/10.0.0-M3<br>
This version is so new<br>
All the versions I have been exposed to are Tomcat 7<br>
The open source community has access to the latest and most popular technologies</p>
<p>The next step in the ReadMe.md is Cloud Deployment I haven't been able to practice that yet.</p>
<p>I had some problems with my dockers in the last two days.<br>
My 8G device does not meet the minimum configuration requirements<br>
So I bought another 8 gigabyte memory stick on the shopping website today.<br>
Thanks for the quick logistics Goods purchased online can be received within 24 hours.</p>
<p>I think upgrading the equipment will be of great help to my study.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Install Tomcat]]></title>
        <id>https://HANXU2018.github.io/8Yn9NSlmJ/</id>
        <link href="https://HANXU2018.github.io/8Yn9NSlmJ/">
        </link>
        <updated>2020-05-23T15:12:24.000Z</updated>
        <summary type="html"><![CDATA[<p>In the past study，I know two ways to install Tomcat with Docker</p>
<ol>
<li>
<p>docker pull tomcat</p>
<ul>
<li>that can find the Tomcat image on Docker Hub</li>
</ul>
</li>
<li>
<p>Build with Dockerfile</p>
<ul>
<li>I'm not very good at it but this is important.I'll probably write a separate blog about this approach</li>
</ul>
</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<p>In the past study，I know two ways to install Tomcat with Docker</p>
<ol>
<li>
<p>docker pull tomcat</p>
<ul>
<li>that can find the Tomcat image on Docker Hub</li>
</ul>
</li>
<li>
<p>Build with Dockerfile</p>
<ul>
<li>I'm not very good at it but this is important.I'll probably write a separate blog about this approach</li>
</ul>
</li>
</ol>
<!-- more -->
<h1 id="i-will-record-the-docker-install-tomcat-with-dockerhub-in-this-time">I will record the docker install tomcat with dockerhub in this time.</h1>
<h2 id="1search-the-image-in-docker-hub">1.search the image in docker hub</h2>
<p>https://hub.docker.com/_/tomcat<br>
i can see the commant <code>docker pull tomcat</code><br>
Copy and paste to pull this image</p>
<ul>
<li><code>docker search tomcat</code> that can search the version that can install in our device.</li>
</ul>
<h2 id="docker-pull-tomcat">docker pull tomcat</h2>
<p>i use this to pull the image from dockerhub<br>
when finished <code>docker pull tomcat</code> can see the images that have been downloaded</p>
<ul>
<li>In China the average home already has 100 megabits of Internet speed,but the speed of visiting foreign websites is always extremely slow.</li>
<li>thanks for the Chinese Unicorn company like alibaba that can let every one to use their mirrors to speed up.</li>
</ul>
<h2 id="use-tomcat-images">Use tomcat images</h2>
<p>run this comman</p>
<pre><code>docker run --name tomcat -p 8080:8080 -v /test:/usr/local/tomcat/webapps/test -d tomcat  
</code></pre>
<p>because of i use WIN10 this time i want to share the folder test in tomcat so i do this , but if we use linux we can user this</p>
<pre><code>docker run --name tomcat -p 8080:8080 -v $PWD/test:/usr/local/tomcat/webapps/test -d tomcat  
</code></pre>
<ol>
<li>-p 8080:8080 Map port 8080 of the container to port 8080 of the host.</li>
<li>-v $PWD/test:/usr/local/tomcat/webapps/test Mount the test in the current directory on the host to the container's /test</li>
</ol>
<h2 id="docker-ps">docker ps</h2>
<p>Check for success,if success ,we will see the tomcat container running.</p>
<h2 id="visit-the-localhost8080-check-the-tomcat-running-condition">visit the localhost:8080 check the tomcat running condition</h2>
<p>if can you see someting about tomcat on website that you run successfuly.</p>
<h2 id="some-of-the-problems-i-had">Some of the problems I had</h2>
<p>when i visit the 8080 ,A 404 error occurred.But I realized that tomcat was running successfully.<br>
when i use <code>docker exec -it 68c241f24239 /bin/bash</code><br>
Enter the tomcat container<br>
use <code>ls -l</code><br>
see that has two folders webapps and webapps.dist<br>
<code>cd webapps</code> open this folder use <code>ls -l</code> see that it'a empty folder<br>
<code>cd ../webapps.dist</code> change to this folder taht <code>ls -l</code><br>
see the Root and other files in this folder<br>
The tomcat default welcome page is actually placed in the path.<br>
For demonstration purposes i use <code>mv Root ../webapps</code><br>
Move the files from the default welcome screen to webapps<br>
then vist the <code>localhost:8080</code> can see the welcome page</p>
<p>The good news is that I learned the simple principles of tomcat when I was studying the Java web.<br>
Otherwise it will take more time to deal with the problem.</p>
]]></content>
    </entry>
</feed>